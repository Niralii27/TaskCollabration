@model List<TaskCollabration.Models.AdminTaskModel>

@{
    ViewData["Title"] = "Tasks";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="content-page">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-wrap align-items-center justify-content-between breadcrumb-content">
                            <h5>Your Tasks</h5>
                            <div class="d-flex flex-wrap align-items-center">
                                <div class="pl-3 border-left btn-new">
                                    <a asp-action="AddTask" class="btn btn-primary">New Task</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Task Grid View -->
        <div id="grid" class="item-content animate__animated animate__fadeIn active" data-toggle-extra="tab-content">
            <div class="row">
                @if (TempData["msg"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show d-flex align-items-center" role="alert" style="white-space: nowrap;">
                        <i class="ri-check-line mr-2"></i> <span>@TempData["msg"]</span>
                        <button type="button" class="close ml-auto" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                }

                @foreach (var task in Model)
                {
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card card-block card-stretch card-height">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-1">@task.Title</h5>
                                    <div class="task-priority" style="background-color: @GetPriorityColor(task.Priority);">
                                        @task.Priority
                                    </div>
                                </div>
                                <p class="mb-3"><strong>Status:</strong> @task.Status</p>
                                <p class="mb-3"><strong>Description:</strong> @task.Description</p>
                                <p class="mb-3"><strong>Date:</strong> @(task.Date?.ToShortDateString() ?? "No date provided")</p>

                                <div class="mb-3">
                                    <strong>File:</strong>
                                    @if (!string.IsNullOrEmpty(task.FilePath))
                                    {
                                        <a href="@task.FilePath" target="_blank" class="text-primary">View File</a>
                                    }
                                    else
                                    {
                                        <span>No file attached</span>
                                    }
                                </div>

                                <div class="d-flex align-items-center justify-content-between pt-3 border-top">
                                    <a class="btn btn-outline-primary" asp-action="EditTask" asp-route-id="@task.Id">
                                        <i class="ri-edit-box-line"></i> Edit
                                    </a>
                                    <a class="btn btn-outline-danger" asp-action="DeleteTask" asp-route-id="@task.Id" onclick="return confirm('Are you sure you want to delete this task?');">
                                        <i class="ri-delete-bin-line"></i> Delete
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <!-- End of Task Grid View -->

    </div>
</div>

@functions {
    // Function to return different background colors based on priority
    private string GetPriorityColor(string priority)
    {
        switch (priority.ToLower())
        {
            case "high":
                return "#f44336"; // Red for High
            case "medium":
                return "#ff9800"; // Orange for Medium
            case "low":
                return "#4caf50"; // Green for Low
            default:
                return "#2196f3"; // Blue for default
        }
    }
}
